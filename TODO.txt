Figured out features:
- ECS
- TypeTraits

Working features but may revisit:
- Frame Limit System
- Scene System
- Camera System
- Texture Manager
- Text Manager
- Input Handler
- Font Manager

WIP features with clear implementation:
- Serialization
- Audio Manager
- User Interface System
- Animation System
- Utility (vectors, math, timers, etc)
- Tilemap System

WIP features with uncertain implementation:
- Physics Engine
    - Forces, Torques
    - Fluid Simulation
    - Collision Detection
        - Static, Dynamic, Swept
- Particle System
- State Machine System
- Event System (observer / subject)
- World Generation Tools 
    - Perlin Noise
    - Chunk System
    - Level System
- Cutscene Support

Classes:
- UIElement
- Observer
- Subject
- Singleton
- StateMachine
- State
- Circle
- Rectangle
- Camera
- Scene
- Collision / Manifold
- Vector2
- RNG
- Key
- Animation
- Text
- Font
- Mouse
- Color
- PixelFormat
- Timer
- Countdown
- Direction
- Chunk
- Level
- Tilemap

ptgn::
    window::
        Create(std::string name, Vector2 size, int flags);
    ui::
        Load(std::string name, UIElement element);
        Unload(std::string name);
    draw::
        UI(std::string name);
        Texture(std::string name);
        Rectangle(Vector2 center, Rectangle rectangle, Color color);
        Circle(Vector2 center, Circle circle, Color color);
        Line(Vector2 origin, Vector2 destination, Color color);
        Point(Vector2 point, Color color);
    texture::
        Load(std::string name, std::string path);
        Unload(std::string name);
    sound::
        Load(std::string name, std::string path);
        Play(std::string name);
    scene::
        Load(std::string name, Scene scene);
        Start(std::string name);
        Active();
    camera::
        Active();
    text::
        Load(std::string name, std::string text, std::string font);
        Unload(std::string name);
    font::
        Load(std::string name, std::string path);
        Unload(std::string name);
    animation::
        Load(std::string name, std::string spritemap_path);
        Unload(std::string name);
    input::
        KeyPressed(Key key);
        KeyReleased(Key key);
        KeyDown(Key key);
        KeyUp(Key key);
        MousePressed(Mouse button);
        MouseReleased(Mouse button);
        MouseDown(Mouse button);
        MouseUp(Mouse button);
        MouseHeld(Mouse button);
        MouseScreenPosition();
        MouseWorldPosition();
    collision::

    math::
        Random();
        Min();
        Max();
        Cos(double x);
        Sin(double x);
        PI<T>();

TODO:
- Consider switching to smart pointers in ShapeComponent.h.
- Eventually move logging into class which can print to console and log to file.
- Add ability to copy text.
- Add better documentation to Engine class.
- Add better documentation to EventHandler class.
- Add better documentation to Particle class.
- Add better documentation to ParticleManager class.
- Write tests for RNG class template parameters being random number engines.
- Consider adding Polygon shape to collision system.
- Test all static collision utility functions.
- Test dynamic collision utility functions.
- Add enum tests for Texture.cpp GetPixelFormat and GetTextureAccess static_casts.
- Reconsider HitboxComponent offset positioning (top left for AABBs vs center for circles).
- Test Countdown class IncreaseRemaining and DecreaseRemaining functions.